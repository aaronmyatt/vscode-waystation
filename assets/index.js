import { u as B, r as q, o as Q, d as D, m as E, a as S, S as U, c as V, b as x, t as C, e as f, f as s, w as r, Q as z, g as M, h, F as $, i as j, j as A, k as F, l as g, n as m, p as P, q as _, s as J, v as K, x as N, y as T, z as W, A as G, B as H, C as R, D as X, N as Y } from "./vendor.js"; const Z = function () { const t = document.createElement("link").relList; if (t && t.supports && t.supports("modulepreload")) return; for (const l of document.querySelectorAll('link[rel="modulepreload"]')) i(l); new MutationObserver(l => { for (const o of l) if (o.type === "childList") for (const u of o.addedNodes) u.tagName === "LINK" && u.rel === "modulepreload" && i(u) }).observe(document, { childList: !0, subtree: !0 }); function n (l) { const o = {}; return l.integrity && (o.integrity = l.integrity), l.referrerpolicy && (o.referrerPolicy = l.referrerpolicy), l.crossorigin === "use-credentials" ? o.credentials = "include" : l.crossorigin === "anonymous" ? o.credentials = "omit" : o.credentials = "same-origin", o } function i (l) { if (l.ep) return; l.ep = !0; const o = n(l); fetch(l.href, o) } }; Z(); let w; function L () { return w || (w = acquireVsCodeApi()), w } function ee () { const v = B(); let t, n = q({}); t = L(), n = Object.assign(n, t.getState()), Q(() => { window.addEventListener("message", l => { const o = l.data; switch (o.type) { case "waystation:current": { t == null || t.setState(o.waystation), Object.assign(n, o.waystation); break } } }) }); function i (l) { t == null || t.setState(l), t == null || t.postMessage({ type: "waystation:update", waystation: JSON.stringify(l) }), v.notify({ message: "Synced with filesystem", color: "green", icon: E }) } return D(n, i, { debounce: 500 }), n } const te = { class: "bg-grey-1 text-grey-10" }, le = { class: "text-capitalize" }, ae = { class: "text-grey-8 q-gutter-xs" }, ne = { setup (v) { const t = ee(), n = S(), i = S(!1); function l (u) { t.marks = t.marks.filter(e => u.id !== e.id) } function o (u) { { const e = L(); e == null || e.postMessage({ type: "waystation:openDocument", mark: JSON.stringify(u) }) } } return Q(() => { const u = document.getElementById("draggable"); U.create(u, { draggable: ".drag-item", onEnd: async function (e) { function a (p, c, y) { return p.reduce((d, b, k, O) => (c === y && d.push(b), k === c || (c < y && d.push(b), k === y && d.push(O[c]), c > y && d.push(b)), d), []) } t.marks = a(t.marks, e.oldIndex, e.newIndex) } }) }), (u, e) => (h(), V("div", te, [x("h5", le, C(f(t).name), 1), s(z, { id: "draggable" }, { default: r(() => [(h(!0), V($, null, j(f(t).marks, a => (h(), V("div", { key: a.id, class: "drag-item" }, [s(P, { clickable: "", onClick: p => o(a) }, { default: r(() => [s(_, null, { default: r(() => [s(J, null, { default: r(() => [K(C(a.name), 1)]), _: 2 }, 1024), x("pre", null, C(a.body), 1)]), _: 2 }, 1024), s(_, { top: "", side: "" }, { default: r(() => [x("div", ae, [s(g, { onClick: N(p => { n.value = a, i.value = !0 }, ["stop"]), class: "gt-xs", size: "12px", flat: "", dense: "", round: "", icon: f(T) }, null, 8, ["onClick", "icon"]), s(g, { onClick: N(p => l(a), ["stop"]), class: "gt-xs", size: "12px", flat: "", dense: "", round: "", icon: f(W) }, null, 8, ["onClick", "icon"]), s(g, { size: "12px", flat: "", dense: "", round: "", icon: f(G) }, null, 8, ["icon"])])]), _: 2 }, 1024)]), _: 2 }, 1032, ["onClick"]), s(H, { spaced: "", inset: "" })]))), 128))]), _: 1 }), s(M, { modelValue: i.value, "onUpdate:modelValue": e[6] || (e[6] = a => i.value = a), "full-width": "" }, { default: r(() => [s(A, null, { default: r(() => [s(F, null, { default: r(() => [s(g, { onClick: e[0] || (e[0] = a => { n.value = {}, i.value = !i.value }), label: "Close" }), s(m, { label: "Name", modelValue: n.value.name, "onUpdate:modelValue": e[1] || (e[1] = a => n.value.name = a), filled: "" }, null, 8, ["modelValue"]), s(m, { label: "Body", modelValue: n.value.body, "onUpdate:modelValue": e[2] || (e[2] = a => n.value.body = a), filled: "", type: "textarea" }, null, 8, ["modelValue"]), s(m, { label: "Path", modelValue: n.value.path, "onUpdate:modelValue": e[3] || (e[3] = a => n.value.path = a), filled: "" }, null, 8, ["modelValue"]), s(m, { label: "Line", modelValue: n.value.line, "onUpdate:modelValue": e[4] || (e[4] = a => n.value.line = a), filled: "", type: "number" }, null, 8, ["modelValue"]), s(m, { label: "Column", modelValue: n.value.column, "onUpdate:modelValue": e[5] || (e[5] = a => n.value.column = a), filled: "", type: "number" }, null, 8, ["modelValue"])]), _: 1 })]), _: 1 })]), _: 1 }, 8, ["modelValue"])])) } }, I = R(ne); I.use(X, { extras: ["material-icons"], plugins: { Notify: Y }, config: { notify: {} } }); I.mount("#app");
